---
title: 'Spatial Ecology and Macroecology'
subtitle: 'Practical - Week 3'
date: 2024-10-14
author:
  - name: 'Florencia Grattarola'
    id: fg
    orcid: 0000-0001-8282-5732
    email: grattarola@fzp.czu.cz
    affiliation: 
      - name: MOBI Lab
        url: https://petrkeil.github.io/
format: 
  revealjs:
    self-contained: true
    logo: 'img/Logo_czu_cz_hr.png'
    auto-stretch: false
    scrollable: true
    code-copy: true
    code-tools: true
    code-block-border-left: true
    enter-title-slide: false
    theme: [assets/monash.scss]
    controls: true
    width: 1280
    height: 720
    css: [assets/syntax-highlight.css, assets/custom.css, assets/pacman.css]
    highlight-style: github
    echo: true
    footer: '[https://github.com/petrkeil/Spatial-Ecology-and-Macroecology](https://github.com/petrkeil/Spatial-Ecology-and-Macroecology)'
editor: source
---

## What are we going to see today?

We will explore the potential drivers of species distribution.

::: incremental
1.  Data sources (climate, habitat types, land cover, socioeconomic)
2.  Data download and processing
3.  Visualisation/mapping   
4.  Correlations between predictors
5.  Description of patterns (vs. biodiversity)
::: 

. . .

Exercises:

::: incremental
1.  Peru: drivers of amphibians richness patterns üê∏ 
2.  France: drivers of trees richness patterns üå≥
:::

# Data sources {background-color="#488fb8"}

---

![](https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS5th4HWNhEfBMtu7blfu7FNLGvYbaljkWFRA&usqp=CAU){.centre top="200" height="200"}

### [worldclim.org](https://www.worldclim.org)

**WorldClim** Is a database of high spatial resolution global weather and climate data. You can download gridded weather and climate data for historical (near current) and future conditions.

---

![](https://chelsa-climate.org/wp-content/uploads/2016/02/logotest3.gif){.centre top="200" height="200"}

### [chelsa-climate.org](https://chelsa-climate.org)

**CHELSA** (Climatologies at high resolution for the earth's land surface areas) is a very high resolution (30 arc sec, \~1km) global downscaled climate data set. It includes climate layers for various time periods and variables, ranging from the Last Glacial Maximum, to the present, to several future scenarios.

---

![](https://zenodo.org/record/4058819/files/screen_lvl2.png){.centre top="200" height="200"}

### [nature.com/articles/s41597-020-00599-8](https://www.nature.com/articles/s41597-020-00599-8)

A global, spatially explicit characterization of 47 **terrestrial habitat types**, as defined in the International Union for Conservation of Nature (IUCN) habitat classification scheme.

![](https://github.com/GuangchuangYu/hexSticker/raw/master/inst/figures/ggplot2.png){height="100"} `Habitatmapping`: <https://github.com/Martin-Jung/Habitatmapping>

---

![](https://developers.google.cn/earth-engine/datasets/images/RESOLVE/RESOLVE_ECOREGIONS_2017_sample.png){.centre top="200" height="200"}

### [ecoregions.appspot.com](https://ecoregions.appspot.com)

The **RESOLVE Ecoregions** dataset, updated in 2017, offers a depiction of the 846 terrestrial ecoregions that represent our living planet.

---

![](https://ipbes.net/sites/default/files/copernicus.jpg){.centre top="200" height="200"}

### [land.copernicus.eu/pan-european/corine-land-cover](https://land.copernicus.eu/pan-european/corine-land-cover)

The **CORINE** Land Cover (CLC) consists of an inventory of land cover in 44 classes (from Europe). The inventory was initiated in 1985. Updates have been produced in 2000, 2006, 2012, and 2018.

---

![](https://chucktownfloods.cofc.edu/wp-content/uploads/2019/07/NASA-Logo-1024x512.png){.centre top="200" height="200"}

### [modis.gsfc.nasa.gov](https://modis.gsfc.nasa.gov)

**Terra MODIS** and **Aqua MODIS** satellites are viewing the entire Earth's surface every 1 to 2 days, acquiring data in 36 spectral bands or groups of wavelengths.

![](https://github.com/ropensci/MODIStsp/raw/master/man/figures/logo.png){height="100"} `MODIStsp`: <https://github.com/ropensci/MODIStsp/>

---

![](https://chucktownfloods.cofc.edu/wp-content/uploads/2019/07/NASA-Logo-1024x512.png){.centre top="200" height="200"}

### [sedac.ciesin.columbia.edu](https://sedac.ciesin.columbia.edu)

**SEDAC**, the Socioeconomic Data and Applications Center, focuses on human interactions in the environment and seeks to develop and operate applications that support the integration of socioeconomic and earth science data.

# [EXCERCISE]{.story} [Peru: drivers of amphibians richness]{style="float:right;text-align:right;"} {background-color="#488fb8"}

## Peru: drivers of amphibians richness üê∏

Steps:

::: incremental
1.    Get a map of Peru
2.    Get 5 different drivers (`raster`) 
3.    Process all the layers to the same resolution and the extent of Peru
4.    Visualise predictors 
5.    Calculate the correlation between the different predictors (and compare with biodiversity) 
:::

# Some preparation before starting to code

## Biodiversiy data download

Please download the following file and store it on you `data` folder:  

-   `amphibians_grid.rds`

. . . 

To create this file, I followed steps from the previous practicals. First I downloaded and cleaned data from GBIF, and then I created a grid cell for Peru of 50 x 50 km.

. . . 

:::{.fragment}
[Check [`download_amphibiansPE_data_from_GBIF.R`](https://github.com/petrkeil/Spatial-Ecology-and-Macroecology/blob/8a5e8574fc872720c30043d95e06aa01572ec435/Practical_classes/Week3_predictors/download_amphibiansPE_data_from_GBIF.R) to see how the data were downloaded, and [`preparing_amphibiansPE_grid.R`](https://github.com/petrkeil/Spatial-Ecology-and-Macroecology/blob/8a5e8574fc872720c30043d95e06aa01572ec435/Practical_classes/Week3_predictors/preparing_amphibiansPE_grid.R) to see how I created the grid]{.font-aside}   
:::

---

## Biodiversiy data download

This is how the data look like

```{r}
#| echo: false
#| eval: true


library(pacman)
pacman::p_load(sf,  # Manage spatial data as simple features dataframes
               rnaturalearth, # useful base maps
               tidyverse) # install the package if you haven't already


amphibians_grid <- readRDS('data/amphibians_grid.rds')

ggplot() + 
  geom_sf(data=amphibians_grid %>% mutate(SR=ifelse(SR==0, NA, SR)), aes(fill=SR), lwd = 0) +
  scale_fill_fermenter(palette ='YlOrBr', na.value ='grey90', n.breaks=6, direction = 1) +
  theme_bw()
```

---

## Packages

We will use `sf`, `rnaturalearth`, and `tidyverse`.

. . .

```{r}
#| echo: true
#| eval: true
#| code-block-border-left: true

library(pacman)
pacman::p_load(sf,  # Manage spatial data as simple features dataframes
               rnaturalearth, # useful base maps
               tidyverse) # install the package if you haven't already

sf_use_s2(FALSE) # switch spherical geometry off
```

---

## Packages

We will also use `terra` to manage and analyse rasters and vectors, `tmap` for plotting maps, `geodata` to get multiple sources of spatial data, and `MODIStsp` for processing time series from MODIS data.

. . .

```{r}
#| echo: true
#| eval: true
#| code-block-border-left: true

pacman::p_load(terra, # Work with rasters and vectorial spatial data
               tmap, # Cool maps
               GGally, # Cool correlation maps
               geodata, # Get data from multiple sources
               MODIStsp) # Get data from MODIS
```

## Peru: drivers of amphibians richness üê∏

1.    Get a map of Peru

We will need,

::: incremental
-  The polygon and spatial extent of Peru
-  A planar projection of the area.
:::


---

## Peru: drivers of amphibians richness üê∏

1.    Get a map of Peru

```{r}
#| echo: true
#| eval: true
#| code-block-border-left: true

peru <- ne_countries(
  country = "Peru",
  returnclass = "sf" # We want an object of class sf
) 
```

. . . 

Let‚Äôs see how it looks.

---

## Peru: drivers of amphibians richness üê∏

1.    Get a map of Peru

```{r}
#| echo: true
#| eval: true
#| code-block-border-left: true

ggplot() + 
  geom_sf(data=peru, fill='white') +
  coord_sf()
```

---

## Peru: drivers of amphibians richness üê∏

1.    Get a map of Peru

To get a planar projection of the area (visit <https://projectionwizard.org/>).

. . .

```{r}
#| echo: true
#| eval: true
#| code-block-border-left: true

proj_peru <- 'PROJCS["ProjWiz_Custom_Transverse_Cylindrical_Equal_Area",
 GEOGCS["GCS_WGS_1984",
  DATUM["D_WGS_1984",
   SPHEROID["WGS_1984",6378137.0,298.257223563]],
  PRIMEM["Greenwich",0.0],
  UNIT["Degree",0.0174532925199433]],
 PROJECTION["Transverse_Cylindrical_Equal_Area"],
 PARAMETER["False_Easting",0.0],
 PARAMETER["False_Northing",0.0],
 PARAMETER["Central_Meridian",-74.7949219],
 PARAMETER["Scale_Factor",1.0],
 PARAMETER["Latitude_Of_Origin",0.0],
 UNIT["Meter",1.0]]'
```

. . . 

We will use it later.

---


## Peru: drivers of amphibians richness üê∏

2.    Get 5 different drivers (`raster`) 

::: incremental
-   Annual mean temperature (**WorldClim BIO1**)
-   Precipitation seasonality (**WorldClim BIO15**)
-   Elevation (**SRTM**)
-   Land-cover (**MODIS Terra MCD12Q1**)
-   Human footprint index (**SEDAC**)
:::

---

## Peru: drivers of amphibians richness üê∏

2.    Get 5 different drivers (`raster`) 

When working with rasters, there are three basic procedures we can recommend you:

::: incremental
1.  **Crop**: Cut the rasters to the geographic `extent` you need. This is a square cut.
2.  **Reproject**: Make sure that all your rasters are on the same `projection`. But be aware that by reprojecting, you are introducing an additional source of error.
3.  **Mask**: Set to `NA` all the cells outside your polygon(s) of interest.
:::

---

## Peru: drivers of amphibians richness üê∏

2.    Get 5 different drivers (`raster`) 

We will create a variable with the spatial extent of Peru to use it to crop the raster data.

. . .

```{r}
#| echo: true
#| eval: true
#| code-block-border-left: true

round(st_bbox(peru),0) # Check the extent of the country (round values)
round(st_bbox(peru),0) + c(-1,-1,1,1) #This way we add space around the country
```

. . . 

<br>Now let's create an object with the extent.

. . . 

```{r}
#| echo: true
#| eval: true
#| code-block-border-left: true

extent <- round(st_bbox(peru),0) + c(-1,-1,1,1) # Bounding box plus 1 degree
```

## Peru: drivers of amphibians richness üê∏

2.    Get 5 different drivers (`raster`) 

We will also set the path were we are going to save data. 

. . . 

```{r}
#| echo: true
#| eval: true
#| code-block-border-left: true

geodata_path("data/")
```

<br>This is required to use the package `geodata`. From now on, every time you try to get a dataset with `geodata` functions, the package will check if the data already exists in your data folder and load it from there.

---

## Peru: drivers of amphibians richness üê∏

2.    Get 5 different drivers (`raster`): climate

Let's first download the **WorldClim** data (version 2.1 climate data for 1970-2000):

-   Annual mean temperature (`bio1`)  
-   Annual precipitation (`bio15`)  

. . .

<br> You can download these data from <https://www.worldclim.org/data/worldclim21.html> <br> or use the package `geodata`.

---

## Peru: drivers of amphibians richness üê∏

2.    Get 5 different drivers (`raster`): climate 

We will use the function `worldclim_country()` from `geodata`.

. . .

```{r}
#| echo: true
#| eval: true
#| code-block-border-left: true

tavg <- worldclim_country(var = "tavg",country = "PER") # PER is the three letters ISO code for PERU
tavg <- crop(tavg, extent)
```

```{r}
#| echo: true
#| eval: true
#| code-block-border-left: true

tavg
```


---

## Peru: drivers of amphibians richness üê∏

2.    Get 5 different drivers (`raster`): climate 

Now get the precipitation data from Worldclim.

. . .

```{r}
#| echo: true
#| eval: true
#| code-block-border-left: true

prec <- worldclim_country(
  var = "prec",
  country = "PER"
)

prec <- crop(prec, extent)

prec
```

---

## Peru: drivers of amphibians richness üê∏

2.    Get 5 different drivers (`raster`): elevation 

We will use the function `elevation_30s()` from `geodata`. These data come from the Shuttle Radar Topographic Mission and are aggregated to 1km resolution.

```{r}
#| echo: true
#| eval: true
#| code-block-border-left: true

elev <- elevation_30s(country = "PER")

elev <- crop(elev, extent)

elev
```

---

## Peru: drivers of amphibians richness üê∏

2.    Get 5 different drivers (`raster`): land-cover 

Now, let's get the landcover data. For this we will use the package `MODIStsp`.

. . .

::: {.callout-important}
## `MODIStsp` has not been maintained

The package may not be working properly.
:::

. . . 

```{r}
#| echo: true
#| eval: true
#| code-block-border-left: true

MODIStsp_get_prodnames()
```

---

## Peru: drivers of amphibians richness üê∏

2.    Get 5 different drivers (`raster`): land-cover 

To download **MODIS** data through the NASA *http* server, we need to create a profile at <https://urs.earthdata.nasa.gov/home> to get a user and password.

. . . 

<br>Today, I'll present you an example and provide you with the data already processed, but you can do this at home.

. . . 

<br>We will use the [Land Cover Type Yearly L3 Global 500m](https://lpdaac.usgs.gov/products/mcd12q1v006/), and download data for **Peru** from the year **2020**.

---

## Peru: drivers of amphibians richness üê∏

2.    Get 5 different drivers (`raster`): land-cover 

With `MODIStsp_get_prodlayers()` you can see all the layers of the product:

. . . 

```{r}
#| echo: true
#| eval: true
#| code-block-border-left: true

MODIStsp_get_prodlayers("MCD12Q1", prodver = "061")$bandnames
```

. . . 

<br>

[There are five different land cover classification schemes, we will be using the primary land cover scheme (**LC1**) which identifies 17 classes defined by the [IGBP](http://www.igbp.net/) (International Geosphere-Biosphere Programme), including 11 natural vegetation classes, 3 human-altered classes, and 3 non-vegetated classes.]{.font-aside}

---

## Peru: drivers of amphibians richness üê∏

2.    Get 5 different drivers (`raster`): land-cover 

We will use the function `MODIStsp()` to download data:

``` r
MODIStsp(
  ...,
  gui = TRUE,
  out_folder = NULL,
  out_folder_mod = NULL,
  opts_file = NULL,
  selprod = NULL,
  prod_version = NULL,
  bandsel = NULL,
  quality_bandsel = NULL,
  indexes_bandsel = NULL,
  sensor = NULL,
  download_server = NULL,
  downloader = NULL,
  user = NULL,
  password = NULL,
  download_range = NULL,
  start_date = NULL,
  end_date = NULL,
  spatmeth = NULL,
  start_x = NULL,
  end_x = NULL,
  start_y = NULL,
  end_y = NULL,
  bbox = NULL,
  spafile = NULL,
  out_projsel = NULL,
  output_proj = NULL,
  out_res_sel = NULL,
  out_res = NULL,
  resampling = NULL,
  reprocess = NULL,
  delete_hdf = NULL,
  nodata_change = NULL,
  scale_val = NULL,
  ts_format = NULL,
  out_format = NULL,
  compress = NULL,
  test = NULL,
  n_retries = 5,
  verbose = TRUE,
  parallel = TRUE
)
```

---

## Peru: drivers of amphibians richness üê∏

2.    Get 5 different drivers (`raster`): land-cover

```{r}
#| echo: true
#| eval: false
#| code-block-border-left: true

MODIStsp(
  gui = FALSE,
  out_folder = "data/",
  out_folder_mod = "data/",
  selprod = "LandCover_Type_Yearly_500m (MCD12Q1)",
  prod_version = "061",
  bandsel = "LC1",
  sensor = "Terra",
  user = your_user, # your username for NASA http server
  password = your_pass, # your password for NASA http server
  start_date = "2020.01.01",
  end_date = "2020.12.31",
  verbose = TRUE,
  bbox = extent, # bbox covering Peru
  spatmeth = "bbox",
  out_format = "GTiff",
  compress = "LZW",
  out_projsel = "User Defined",
  output_proj = 4326,
  delete_hdf = TRUE,
  parallel = TRUE
)
```

---

## Peru: drivers of amphibians richness üê∏

2.    Get 5 different drivers (`raster`): land-cover

Let's read the layer and process it.

. . . 

```{r}
#| echo: true
#| eval: true
#| code-block-border-left: true

land <- rast("data/MCD12Q1.061_LC_Type1_doy2020001_aid0001.tif")

land <- crop(land , extent)

land
```

---

## Peru: drivers of amphibians richness üê∏

2.    Get 5 different drivers (`raster`): anthropogenic

. . .

Again using the package `geodata`.

. . . 

```{r}
#| echo: true
#| eval: true

footp <- footprint(year = 2009)

footp <- crop(footp, extent)

footp
```

---

## Peru: drivers of amphibians richness üê∏

3.    Process all the layers to the same resolution and the extent of Peru

Rasters should have the same spatial extent and resolution...
If they don't match... what should we do?

. . . 

```{r}
#| echo: true
#| eval: true

compareGeom(tavg, prec, elev, footp, land, stopOnError = F, messages = T, res = T)
```

---

## Peru: drivers of amphibians richness üê∏

3.    Process all the layers to the same resolution and the extent of Peru

```{r}
#| echo: true
#| eval: true

st_bbox(tavg)
st_bbox(prec) 
st_bbox(elev) 
st_bbox(footp)
st_bbox(land)

#Compare with the country extent
st_bbox(peru)
```

---

## Peru: drivers of amphibians richness üê∏

3.    Process all the layers to the same resolution and the extent of Peru

We will use the package `terra` to process the rasters.\
First we need to create a new raster to use as a **template**.

. . . 

::: {.callout-tip collapse="true"}
## Bug in `terra`

We could do:

```
r <- rast(res = 10000,
          ext = extention, # or even `ext(vect(peru))`
          crs = "epsg:4326") 
```

But there's a bug :O\
I reported it <https://github.com/rspatial/terra/issues/1618>

:::

---

## Peru: drivers of amphibians richness üê∏

3.    Process all the layers to the same resolution and the extent of Peru

We will use the package `terra` to process the rasters.\
First we need to create a new raster to use as a **template**.

```{r}
#| echo: true
#| eval: true

r <- rast(res = 10000, # Target cell size
          ext(vect(st_transform(peru, proj_peru))), # Extent of the raster
          crs = proj_peru) %>% # Useful planar projection
  project(., "epsg:4326") # Projection of our rasters

r
```

---

## Peru: drivers of amphibians richness üê∏

3.    Process all the layers to the same resolution and the extent of Peru

We will `resample()` all of the rasters to our target resolution.

```{r}
#| echo: true
#| eval: true

tavg <- resample(tavg, r, method = "bilinear") # for continuous data!
prec <- resample(prec, r, method = "bilinear")
elev <- resample(elev, r, method = "bilinear")
footp <- resample(footp, r, method = "near")
land <- resample(land, r, method = "near")  # for categorical data!
```

. . . 

And we can compare the rasters after resampling.

```{r}
#| echo: true
#| eval: true

compareGeom(tavg, prec, elev, footp, land, stopOnError = F, messages = T, res = T)
```

---

## Peru: drivers of amphibians richness üê∏

3.    Process all the layers to the same resolution and the extent of Peru

And finally we will use `mask()` to intersect the layer with Peru.

```{r}
#| echo: true
#| eval: true

tavg <- mask(tavg, vect(peru))
prec <- mask(prec, vect(peru))
elev <- mask(elev, vect(peru))
footp <- mask(footp, vect(peru))
land <- mask(land, vect(peru))
```

---

## Peru: drivers of amphibians richness üê∏

4.    Visualise predictors

We will use the package `tmap`.

```{r}
#| echo: true
#| eval: true

tmap_mode(mode = "view")
```

---

## Peru: drivers of amphibians richness üê∏

4.    Visualise predictors

Annual mean temperature (WorldClim BIO1)

```{r}
#| echo: false
#| eval: true
#| layout-ncol: 1

tm_shape(mean(tavg)) +
  tm_raster(palette = "OrRd",
            midpoint = NA, 
            style = "cont", n = 10)
```

---

## Peru: drivers of amphibians richness üê∏

4.    Visualise predictors

Precipitation seasonality (WorldClim BIO15)

```{r}
#| echo: false
#| eval: true
#| layout-ncol: 1

tm_shape(mean(prec)) +
  tm_raster(palette = "RdBu", 
            midpoint = NA, 
            style = "cont", n = 10) +
  tm_view(bbox = extent)
```

---

## Peru: drivers of amphibians richness üê∏

4.    Visualise predictors

Elevation (WorldClim)

```{r}
#| echo: false
#| eval: true
#| layout-ncol: 1

tm_shape(elev) +
  tm_raster(palette = "BrBG", 
            midpoint = NA, 
            style = "cont", n = 10) +
  tm_view(bbox = extent) +
  tm_layout(legend.position = 'left')
```

---

## Peru: drivers of amphibians richness üê∏

4.    Visualise predictors

Land-cover (MODIS Terra MCD12Q1). We need to make sure values are factors.

```{r}
#| echo: true
#| eval: true

names(land)
```

```{r}
#| echo: true
#| eval: true

land <- as.factor(land$MCD12Q1.061_LC_Type1_doy2020001_aid0001)
```

---

## Peru: drivers of amphibians richness üê∏

4.    Visualise predictors

Then we can add values to the levels. 

```{r}
#| echo: true
#| eval: true

levels(land[[1]]) <- data.frame(
  ID = c(1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17),
  label = c(
    "Evergreen Needleleaf Forest",
    "Evergreen Broadleaf Forests",
    "Deciduous Broadleaf Forests",
    "Mixed Forests",
    "Closed Shrublands",
    "Open Shrublands",
    "Woody Savannas",
    "Savannas",
    "Grassslands",
    "Permanent Wetlands",
    "Croplands",
    "Urban and Built-up Lands",
    "Cropland/Natural Vegetation Mosaics",
    "Barren",
    "Water Bodies"
  )
)
```

. . . 

Please bear in mind that your landcover layer might not have the same classes/levels as mine. Check here the classification values: [MCD12_User_Guide_V6](https://lpdaac.usgs.gov/documents/101/MCD12_User_Guide_V6.pdf) (see page 7 Classification Legends).

---

## Peru: drivers of amphibians richness üê∏

4.    Visualise predictors

Land-cover (MODIS Terra MCD12Q1)

```{r}
#| echo: false
#| eval: true
#| layout-ncol: 1

tm_shape(land) +
  tm_raster(palette = "Set1", 
            style = "cat") +
  tm_view(bbox = extent) +
  tm_layout(legend.position = 'left')
```

---

## Peru: drivers of amphibians richness üê∏

4.    Visualise predictors

Human footprint index (SEDAC)

```{r}
#| echo: false
#| eval: true
#| layout-ncol: 1

tm_shape(footp) +
  tm_raster(palette = "viridis", style = "cont") +
  tm_view(bbox = extent)
```

---

## Peru: drivers of amphibians richness üê∏

5.    Calculate the correlation between the different predictors (and compare with biodiversity) 

. . . 

Let's get values per grid-cell.

```{r}
#| echo: true
#| eval: true

names(tavg)
```

---

## Peru: drivers of amphibians richness üê∏

5.    Calculate the correlation between the different predictors (and compare with biodiversity) 

Let's see all the values together.

```{r}
#| echo: true
#| eval: true

predictors <- tibble(
  "tavg" = values(mean(tavg)) %>% as.vector(),
  "prec" = values(mean(prec)) %>% as.vector(),
  "elev" = values(elev) %>% as.vector(),
  "land" = values(land) %>% as.vector(),
  "footp" = values(footp) %>% as.vector()
) %>% 
  mutate(
    across(everything(), ~replace_na(.x, NA))
  )
```

---

## Peru: drivers of amphibians richness üê∏

5.    Calculate the correlation between the different predictors (and compare with biodiversity) 

Let's see all the values together.

```{r}
#| echo: true
#| eval: true

summary(predictors)
```

---

## Peru: drivers of amphibians richness üê∏

5.    Calculate the correlation between the different predictors (and compare with biodiversity) 

Let's see how these values correlate.

```{r}
#| echo: true
#| eval: true
#| warning: false

GGally::ggpairs(predictors, cex = 0.1)
```

What can this plot tell you?

# [EXTRA]{.story} [Can we see any pattern with the hotspots of amphibians species richness?]{style="float:right;text-align:right;"} 

## Peru: drivers of amphibians richness üê∏

Let's read the data, plot it and see the patterns

```{r}
#| echo: true
#| eval: true

amphibians_grid <- readRDS("data/amphibians_grid.rds") %>%
  st_transform(., 4326)
```

------------------------------------------------------------------------

## Peru: drivers of amphibians richness üê∏

Let's read the data, plot it and see the patterns

```{r}
#| echo: false
#| eval: true
#| layout-ncol: 1

tm_shape(amphibians_grid) +
  tm_fill("SR", palette = "YlOrBr") +
  tm_view(bbox = extent)
```

------------------------------------------------------------------------

## Peru: drivers of amphibians richness üê∏

Species richness vs mean annual temperature

```{r}
#| echo: false
#| eval: true
#| layout-ncol: 2

tm_shape(amphibians_grid) +
  tm_fill("SR", palette = "YlOrBr") +
  tm_view(bbox = extent)

tm_shape(mean(tavg)) +
  tm_raster(palette = "OrRd", midpoint = NA, style = "cont", n = 10) +
  tm_view(bbox = extent)
```

---

## Peru: drivers of amphibians richness üê∏

Species richness vs precipitation seasonality

```{r}
#| echo: false
#| eval: true
#| layout-ncol: 2

tm_shape(amphibians_grid) +
  tm_fill("SR", palette = "YlOrBr") +
  tm_view(bbox = extent)

tm_shape(mean(prec)) +
  tm_raster(palette = "RdBu", midpoint = NA, style = "cont", n = 10) +
  tm_view(bbox = extent)

```

---

## Peru: drivers of amphibians richness üê∏

Species richness vs elevation

```{r}
#| echo: false
#| eval: true
#| layout-ncol: 2

tm_shape(amphibians_grid) +
  tm_fill("SR", palette = "YlOrBr") +
  tm_view(bbox = extent)

tm_shape(elev) +
  tm_raster(palette = "BrBG", midpoint = NA, style = "cont", n = 10) +
  tm_view(bbox = extent)
```

---

## Peru: drivers of amphibians richness üê∏

Species richness vs land-use

```{r}
#| echo: false
#| eval: true
#| layout-ncol: 2

tm_shape(amphibians_grid) +
  tm_fill("SR", palette = "YlOrBr") +
  tm_view(bbox = extent)

tm_shape(land) +
  tm_raster(palette = "Set1", style = "cat") +
  tm_view(bbox = extent)
```

---

## Peru: drivers of amphibians richness üê∏

Species richness vs human footprint

```{r}
#| echo: false
#| eval: true
#| layout-ncol: 2

tm_shape(amphibians_grid) +
  tm_fill("SR", palette = "YlOrBr") +
  tm_view(bbox = extent)

tm_shape(footp) +
  tm_raster(palette = "viridis", style = "cont") +
  tm_view(bbox = extent)
```


-------------------

## Peru: drivers of amphibians richness üê∏

1.    Get a map of Peru
2.    Get 5 different drivers (`raster`) 
3.    Process all the layers to the same resolution and the extent of Peru
4.    Visualise predictors 
5.    Calculate the correlation between the different predictors (and compare with biodiversity) 

. . .

<br> We are done! No it's **your turn** :)


# [EXCERCISE]{.story} [France: drivers of trees richness]{style="float:right;text-align:right;"} {background-color="#488fb8"}

## France: drivers of trees richness patterns üå≥

1.    Get a map of France
2.    Get 5 different drivers (`raster`) 
3.    Process all the layers to the same resolution and the extent of France
4.    Visualise predictors 
5.    Calculate the correlation between the different predictors (and compare with biodiversity) 

---

## France: drivers of trees richness patterns üå≥

This time, you will use the following drivers: 

-   Temperature seasonality (**WorldClim BIO4**)
-   Annual precipitation (**WorldClim BIO12**)
-   Elevation (**SRTM**)
-   Land-cover (**MODIS Terra MCD12Q1**)
-   Human footprint index (**SEDAC**)

# Any doubts? {background-color="#488fb8"}
