---
title: 'Spatial Ecology and Macroecology'
subtitle: 'Practical - Week 2'
date: 2024-10-07
author:
  - name: 'Florencia Grattarola'
    id: fg
    orcid: 0000-0001-8282-5732
    email: grattarola@fzp.czu.cz
    affiliation: 
      - name: MOBI Lab
        url: https://petrkeil.github.io/
format: 
  revealjs:
    self-contained: true
    logo: 'img/Logo_czu_cz_hr.png'
    auto-stretch: false
    code-copy: true
    code-tools: true
    enter-title-slide: false
    theme: [assets/monash.scss]
    controls: true
    width: 1280
    height: 720
    css: [assets/syntax-highlight.css, assets/custom.css, assets/pacman.css]
    highlight-style: github
    echo: true
    footer: '[https://github.com/petrkeil/Spatial-Ecology-and-Macroecology](https://github.com/petrkeil/Spatial-Ecology-and-Macroecology)'
editor: source
---

## What are we going to see today?

How to plot biodiversity data, explore patterns at different resolutions, and make pretty maps.

::: incremental
1.  Create a grid over the study area (extent/grain)
2.  Calculate biodiversity metrics per area (species richness)
3.  Visualisation/mapping (colour schemes)
4.  Description of patterns (hotspots, sampling bias)
:::

. . .

Exercises:

::: incremental
1.  GLOBAL scale - expert range maps üå≥ (Europe)
2.  LOCAL scale - occurrence records ü¶å (Czech Republic)
:::


# Some preparation before starting to code

## Data download

Please download the following files and store them on you `data` folder:  

-   `trees.gpkg`  
-   `mammalsCZ.rds`
-   `CZE_adm0.gpkg`  
-   `KvadratyCR_JTSK.gpkg`  

## Spatial analyses

For geocomputation today we will use the `sf` package.

. . .

```{r}
#| echo: true
#| eval: true
#| code-block-border-left: true

library(pacman)
pacman::p_load(sf) # install the package if you haven't already
packageVersion('sf')
```

. . .

<br>

```{r}
#| echo: true
#| eval: true
#| message: true
sf_use_s2(FALSE) # switch spherical geometry off
```

## Spatial data download

For downloading country-specific and world polygons we will use the `rnaturalearth` package.

. . .

```{r}
#| echo: true
#| eval: true
#| code-block-border-left: true

pacman::p_load(rnaturalearth, 
               rnaturalearthdata) # the second package is also needed
packageVersion('rnaturalearth')
```


## Visualisation

For all the map plots today we will use the `ggplot` package. It's part of the `tidyverse`.

. . .

```{r}
#| echo: true
#| eval: true
pacman::p_load(tidyverse) # load
```


# [GLOBAL]{.story} [Trees of Europe]{style="float:right;text-align:right;"} {background-color="#488fb8"}

#  {background-color="black" background-image="https://inaturalist-open-data.s3.amazonaws.com/photos/346963549/original.jpeg"}

::: footer
Photo of *Quercus petraea* observed in Portugal by Luke Lythgoe licensed CC-BY, via [iNaturalist](https://www.gbif.org/occurrence/4516831746)
:::

## Mapping species ranges üå≥

Steps:

::: incremental
1.   Get trees' expert range maps (`POLYGONS`)
2.   Get a map of Europe
3.   Create a 1-degree grid (`POLYGONS`)
4.   Calculate species richness per grid cell (SR)\
5.   Visualise **SR** patterns in Europe\
:::

------------------------------------------------------------------------

## Mapping species ranges üå≥

1.   Get trees' expert range maps

We will get the data from: 

::: columns
::: {.column width="60%"}
> Caudullo G., Welk E., San-Miguel-Ayanz J., 2017. Chorological maps for the main European woody species. Data in Brief 12, 662-666. DOI: [10.1016/j.dib.2017.05.007](https://doi.org/10.1016/j.dib.2017.05.007)
:::

::: {.column width="40%"}
![](https://upload.wikimedia.org/wikipedia/commons/thumb/8/83/Pinus_sylvestris_range_in_EU.svg/1280px-Pinus_sylvestris_range_in_EU.svg.png){fig-align="center" width="300"}
:::
:::


:::{.fragment}
[We will **only** use the polygon data. See [`read_tree_data_to_gpkg.R`](https://github.com/petrkeil/Spatial-Ecology-and-Macroecology/blob/3713ec0823ba08d540f3aeea5f8d1a0acb56c71b/Practical_classes/Week2_gridding_and plotting/read_tree_data_to_gpkg.R) to know how these data were processed.]{.font-aside}
:::


## Mapping species ranges üå≥

1.   Get trees' expert range maps

. . .

Read the data

```{r}
#| echo: true
#| eval: true
trees <- st_read('data/trees.gpkg', quiet=T)
```


------------------------------------------------------------------------

## Mapping species ranges üå≥

1.   Get trees' expert range maps

What do the data look like?

. . .

```{r}
#| echo: true
#| eval: true
trees
```

------------------------------------------------------------------------

## Mapping species ranges üå≥

2.   Get a map of Europe

We will download a polygon of the European continent at medium scale, crop it by a defined extent, and finally combine all countries into a unique polygon.

. . .

```{r}
#| echo: true
#| eval: true
europe <- ne_countries(scale = 50, continent = 'Europe', returnclass='sf') %>% 
  st_crop(., xmin = -30, xmax = 60, ymin = 30, ymax = 73)

europe_union <- st_union(europe) %>% st_make_valid() %>% st_cast() # fixes any problems
```

. . .

<br> Let's see how it looks

------------------------------------------------------------------------

## Mapping species ranges üå≥

```{r}
#| echo: true
#| eval: true
ggplot() + 
  geom_sf(data=europe_union, fill='white') +
  coord_sf()
```

------------------------------------------------------------------------

## Mapping species ranges üå≥

Before working with this map, we need to **project** the layer.

. . .

<br> Earth is not flat :) **Projections** help us represent the two-dimensional curved surface of the globe into 2D space. There are many ways to do this.  Find here a cool [Projection Wizard](https://projectionwizard.org).

------------------------------------------------------------------------

## Mapping species ranges üå≥

Equal-area maps preserve area measure, generally distorting shapes in order to do that

```{r}
#| echo: false
#| eval: true
#| layout-ncol: 3
#| fig-cap: 
#|   - "World Geodetic System (EPSG:4326)"
#|   - "Mollweide (EPSG:19986)"
#|   - "WGS 84 / Equal Earth Greenwich (EPSG:8857)"

world <- ne_countries(scale = 50, returnclass='sf')
world <- st_union(world) %>% st_make_valid() %>% st_cast() # fixes any problems

ggplot() + 
    geom_sf(data=world, fill='white') + 
    coord_sf(crs = 4326)

ggplot() + 
    geom_sf(data=world, fill='white') + 
    coord_sf(crs = 'ESRI:54009')

ggplot() + 
    geom_sf(data=world, fill='white') + 
    coord_sf(crs = 'EPSG:8857')
```

. . .

We will choose [**ETRS89-extended / LAEA Europe**](https://epsg.io/3035) (`EPSG:3035`), which uses Lambert Azimuthal Equal Area projection.

------------------------------------------------------------------------

## Mapping species ranges üå≥

Let's transform the data (both the world and the trees' layers). We can use the code `EPSG:3035`.

. . .

```{r}
#| echo: true
#| eval: true
europe_ea <- st_transform(europe_union, crs = 'EPSG:3035') %>% 
  st_make_valid() %>% st_cast()

trees_ea <- st_transform(trees, crs = 'EPSG:3035') %>% 
  st_make_valid() %>% st_cast()
```

## Mapping species ranges üå≥

2.   Get a map of Europe

Let's double check that everything is alright

```{r}
#| echo: true
#| eval: true
st_crs(europe_ea, parameters = TRUE)$epsg
st_crs(europe_ea, parameters = TRUE)$ud_unit
st_crs(trees_ea, parameters = TRUE)$epsg
st_crs(trees_ea, parameters = TRUE)$ud_unit
```

------------------------------------------------------------------------

## Mapping species ranges üå≥

3.   Create a global 1-degree grid  (`POLYGONS`)

We will do this using the function `st_make_grid()`

. . .

``` r
st_make_grid(
  x,
  cellsize = c(diff(st_bbox(x)[c(1, 3)]), diff(st_bbox(x)[c(2, 4)]))/n,
  offset = st_bbox(x)[c("xmin", "ymin")],
  n = c(10, 10),
  crs = if (missing(x)) NA_crs_ else st_crs(x),
  what = "polygons",
  square = TRUE,
  flat_topped = FALSE
)
```

------------------------------------------------------------------------

## Mapping species ranges üå≥

3.   Create a global 1-degree grid  (`POLYGONS`)

For the `cellsize` argument we will chose 1 degree, which is \~100km (=100,000m)

. . .

```{r}
#| echo: true
#| eval: true
europe_grid <- st_make_grid(europe_ea, 
                           cellsize=100000,
                           square=FALSE) %>%  # this will make hexagons
  st_intersection(europe_ea) %>% 
  st_sf(gridID=1:length(.))     
```

. . .

<br> We have the grid, we are ready to calculate metrics per grid cell. Let's see how it looks

------------------------------------------------------------------------

## Mapping species ranges üå≥

3.   Create a global 1-degree grid  (`POLYGONS`)

```{r}
#| echo: false
#| eval: true
ggplot() + 
  geom_sf(data= europe_grid, fill='white', size=0.1) 
```

------------------------------------------------------------------------

## Mapping species ranges üå≥

4.   Calculate species richness per grid cell (SR)\

. . .

Let's plot 5 random species as an example

```{r}
#| echo: false
#| eval: true

set.seed(1234)

ggplot() + 
  geom_sf(data= europe, fill='white', size=0.5)  +
  geom_sf(data= trees_ea %>% slice_sample(n=5),
          aes(fill=layer_name), alpha=0.5, lwd = 0.1) +
  scale_fill_brewer(palette = 'Paired')
```

------------------------------------------------------------------------

## Mapping species ranges üå≥

4.   Calculate species richness per grid cell (SR)\

Now let's use `st_join()` to calculate the number of species per grid-cell (SR).

. . .

```{r}
#| echo: true
#| eval: true
trees_grid <- st_join(europe_grid, trees_ea) %>%
  group_by(gridID) %>%
  summarise(N=sum(!is.na(layer_name)), 
            SR=n_distinct(layer_name, na.rm = TRUE)) %>% 
  st_cast()
```

<br>

This **can** take a while ‚òïÔ∏èüç™

## Mapping species ranges üå≥

4.   Calculate species richness per grid cell (SR)\

Here are the results :)

```{r}
#| echo: true
#| eval: true
trees_grid
```

------------------------------------------------------------------------

## Mapping species ranges üå≥

5.   Visualise **SR** patterns in the world\

. . .

```{r}
#| echo: false
#| eval: true

ggplot() + 
  geom_sf(data=trees_grid %>% mutate(SR=ifelse(SR==0, NA, SR)), aes(fill=SR), lwd = 0) +
  scale_fill_fermenter(palette ='YlOrBr', na.value ='grey90', n.breaks=6, direction = 1) +
  geom_sf(data=europe_ea, fill=NA, col='grey70', size=0.2) +
  theme_bw()
```

-------------------

## Mapping species ranges üå≥

1.   Get trees' expert range maps (`POLYGONS`)
2.   Get a map of Europe 
3.   Create a 1-degree grid (`POLYGONS`)
4.   Calculate species richness per grid cell (SR)\
5.   Visualise **SR** patterns in Europe\

. . .

<br> We are done! No it's **your turn** :)

---

# [LOCAL]{.story} [Mammal's of the Czech Republic]{style="float:right;text-align:right;"} {background-color="#488fb8"}

#  {background-color="black" background-image="https://inaturalist-open-data.s3.amazonaws.com/photos/202963740/original.jpeg"}

::: footer
Photo of *Capreolus capreolus* observed in Czech Republic by romanvrbicek licensed CC-BY-NC, via [iNaturalist](https://www.gbif.org/occurrence/3859392197)
:::

## Mapping occurrence records ü¶å

Steps:

::: incremental
1.  Get occurrence records of mammals in the Czech Republic (`POINTS`)
2.  Create a grid layer of the Czech Republic (`POLYGONS`)
3.  Calculate sampling effort (N) and species richness per grid cell (SR)
4.  Visualise **N** and **SR** patterns in Czech Republic
:::

:::{.fragment}
[You have 30 minutes to work on this. After that, we will code it together :)]{.font-aside}
:::

------------------------------------------------------------------------

## Mapping occurrence records ü¶å

. . .

1.  Get occurrence records of mammals in the Czech Republic

We'll use the data from last practical (downloaded from GBIF), but his time, we will do a data download using `occ_download()`. In this way, we can download unlimited records and get a DOI for our dataset (very important for citation).  

</br>

Check out how it looks like in GBIF, doi: [10.15468/dl.a9fytb](https://doi.org/10.15468/dl.a9fytb).

</br>

:::{.fragment}
[See [`download_mammalsCZ_data_from_GBIF.R`](https://github.com/petrkeil/Spatial-Ecology-and-Macroecology/blob/3713ec0823ba08d540f3aeea5f8d1a0acb56c71b/Practical_classes/Week2_gridding_and plotting/download_mammalsCZ_data_from_GBIF.R) to see how the data were downloaded.]{.font-aside}   
:::

---

## Mapping occurrence records ü¶å

1.  Get occurrence records of mammals in the Czech Republic


. . .

Load the data (downloaded from GBIF)

```{r}
#| echo: true
#| eval: true
mammalsCZ <- readRDS('data/mammalsCZ.rds')
mammalsCZ
```

## Mapping occurrence records ü¶å

1.  Get occurrence records of mammals in the Czech Republic\

Let's keep only a few fields

```{r}
#| echo: true
#| eval: true
mammalsCZ <- mammalsCZ %>% select(species, order, eventDate, 
                                  decimalLongitude, decimalLatitude,
                                  stateProvince, countryCode)
```

## Mapping occurrence records ü¶å

1.  Get occurrence records of mammals in the Czech Republic\

We will transform our data (table) into an sf object using `st_as_sf()`

. . .

``` r
st_as_sf(
  x,
  ...,
  agr = NA_agr_,
  coords,
  wkt,
  dim = "XYZ",
  remove = TRUE,
  na.fail = TRUE,
  sf_column_name = NULL
)
```

## Mapping occurrence records ü¶å

1.  Get occurrence records of mammals in the Czech Republic\

. . .

```{r}
#| echo: true
#| eval: true
mammalsCZ %>% 
  st_as_sf(coords=c('decimalLongitude', 'decimalLatitude'),
           crs=4326)
```


------------------------------------------------------------------------

## Mapping occurrence records ü¶å

1.  Get occurrence records of mammals in the Czech Republic\

And we save

. . .

```{r}
#| echo: true
#| eval: true
mammalsCZ_sf <- mammalsCZ %>% 
  st_as_sf(coords=c('decimalLongitude', 'decimalLatitude'),
           crs=4326) # this is the projection that the data are in
```

. . .

</br>

[Note that `crs=4326` is related to the [EPSG:4326](https://epsg.io/4326), CRS: WGS 84]{.font-aside}

------------------------------------------------------------------------

## Mapping occurrence records ü¶å

2.  Create a grid layer of the Czech Republic

. . .

First, let's load the country's border using `st_read`

. . .

```{r}
#| echo: true
#| eval: true

CZ_borders <- st_read('data/CZE_adm0.gpkg', quiet=T)
```

</br>

[You can also get country data using `rnaturalearth::ne_countries()`]{.font-aside}

## Mapping occurrence records ü¶å

2.  Create a grid layer of the Czech Republic

```{r}
#| echo: true
#| eval: true
CZ_borders
```


## Mapping occurrence records ü¶å

2.  Create a grid layer of the Czech Republic

We will *actually* load a Czech standard grid layer of 100 km^2^ area

. . .

```{r}
#| echo: true
#| eval: true

CZ_grids <- st_read('data/KvadratyCR_JTSK.gpkg', quiet=T)
```

. . .

</br>

[But you can also create this grid by using `st_make_grid()` as we did before.]{.font-aside}


## Mapping occurrence records ü¶å

2.  Create a grid layer of the Czech Republic

. . .

```{r}
#| echo: true
#| eval: true

CZ_grids
```

------------------------------------------------------------------------

## Mapping occurrence records ü¶å

2.  Create a grid layer of the Czech Republic

Check the layer's Coordinate Reference System (CRS)

. . .

```{r}
#| echo: true
#| eval: true

st_crs(CZ_borders) == st_crs(CZ_grids)
```


## Mapping occurrence records ü¶å

2.  Create a grid layer of the Czech Republic

Check the layer's Coordinate Reference System (CRS)

```{r}
#| echo: true
#| eval: true

st_crs(CZ_borders)
st_crs(CZ_grids)
```

------------------------------------------------------------------------

## Mapping occurrence records ü¶å

3.  Calculate sampling effort (N) and species richness per grid cell (SR)

. . .

Frist, we will transform the layer's CRS to [S-JTSK / Krovak East North](https://epsg.io/5514) using `st_transform()`.

. . .

```{r}
#| echo: true
#| eval: true
mammalsCZ_sf <- st_transform(mammalsCZ_sf,  
                             crs = st_crs(CZ_grids)) # the same CRS as the CZ_grids layer
```

## Mapping occurrence records ü¶å

3.  Calculate sampling effort (N) and species richness per grid cell (SR)

. . .

```{r}
#| echo: true
#| eval: true
mammalsCZ_sf
```

------------------------------------------------------------------------

## Mapping occurrence records ü¶å

3.  Calculate sampling effort (N) and species richness per grid cell (SR)

Let's plot the sf objects

------------------------------------------------------------------------

## Mapping occurrence records ü¶å

```{r}
#| echo: true
#| eval: true
ggplot() + 
  geom_sf(data=CZ_borders, fill='white') +
  geom_sf(data=CZ_grids, fill=NA) + 
  geom_sf(data=mammalsCZ_sf)
```

------------------------------------------------------------------------

## Mapping occurrence records ü¶å

3.  Calculate sampling effort (N) and species richness per grid cell (SR)

To calculate number of records and number of species per grid cell, we will use `st_join()`

. . . 

``` r
st_join(
  x,    #   object of class sf
  y,    #   object of class sf
  join = st_intersects,
  ...,
  suffix = c(".x", ".y"),
  left = TRUE,
  largest = FALSE
)
```

------------------------------------------------------------------------

## Mapping occurrence records ü¶å

3.  Calculate sampling effort (N) and species richness per grid cell (SR)

To calculate number of records and number of species per grid cell, we will use `st_join()`

. . .

```{r}
#| echo: true
#| eval: true
st_join(CZ_grids,       # POLYGONS (grid cells)
        mammalsCZ_sf)   # POINTS
```

------------------------------------------------------------------------

## Mapping occurrence records ü¶å

3.  Calculate sampling effort (N) and species richness per grid cell (SR)

Now, we need to summarise the data per grid-cell.\
Luckily, `tidyverse` methods also work for `sf` objects :)

. . .

<br> We will do it with `group_by()` and `summarise()`.

. . .

First, we will group by grid-cells and then we count values per grid.

------------------------------------------------------------------------

## Mapping occurrence records ü¶å

3.  Calculate sampling effort (N) and species richness per grid cell (SR)

Let's calculate the number of records (`N`) and the number of species per grid-cell (`SR`)

. . .

```{r}
#| echo: true
#| eval: true
st_join(CZ_grids, mammalsCZ_sf) %>% 
  group_by(OBJECTID) %>% # the name of the column that has the index
  summarise(N=sum(!is.na(species)), # calculates the number of points in the polygon
            SR=n_distinct(species, na.rm = TRUE))  # calculates the number of different 'species' in the polygon
```

------------------------------------------------------------------------

## Mapping occurrence records ü¶å

3.  Calculate sampling effort (N) and species richness per grid cell (SR)

Let's store the output into a new object `CZ_mammals_grids`.

. . .

```{r}
#| echo: true
#| eval: true
mammalsCZ_grids <- st_join(CZ_grids, mammalsCZ_sf) %>% 
  group_by(OBJECTID) %>% 
  summarise(N=sum(!is.na(species)), 
            SR=n_distinct(species, na.rm = TRUE))
```

------------------------------------------------------------------------

## Mapping occurrence records ü¶å

4.  Visualise **N** and **SR** patterns in Czech Republic

Finally, let's plot this.   
We will do it using `geom_sf()`, a `ggplot` function to visualise sf objects

------------------------------------------------------------------------

## Mapping occurrence records ü¶å

4.  Visualise **N** and **SR** patterns in Czech Republic

```{r}
#| echo: true
#| eval: true
ggplot() + 
  geom_sf(data=mammalsCZ_grids) +
  coord_sf(crs=4326)
```

------------------------------------------------------------------------

## Mapping occurrence records ü¶å

4.  Visualise **N** and **SR** patterns in Czech Republic


Where are the nice colours?

. . . 

We need to indicate which column from the object should the grids be filled with.

------------------------------------------------------------------------

## Mapping occurrence records ü¶å

. . .

```{r}
#| echo: true
#| eval: true
ggplot() + 
  geom_sf(data=mammalsCZ_grids, aes(fill=SR)) +
  coord_sf(crs=4326)
```

------------------------------------------------------------------------

## Mapping occurrence records ü¶å

4.  Visualise **N** and **SR** patterns in Czech Republic

Let's get a nicer color scale.

. . .

Bear in mind that [we see colors differently](https://davidmathlogic.com/colorblind/). Thus, it's important to consider colorblind safe palettes

. . .

[Check out [The R Graph Gallery](https://r-graph-gallery.com/index.html) for many cool graphic options with `ggplot`]{.font-aside}

------------------------------------------------------------------------

## Mapping occurrence records ü¶å

```{r}
#| echo: true
#| eval: true
ggplot() + 
  geom_sf(data=mammalsCZ_grids, aes(fill=SR)) +
  scale_fill_fermenter(palette ='YlOrBr', n.breaks=9, direction = 1) + # fill of the grids
  geom_sf(data=CZ_borders, fill=NA) +
  coord_sf(crs=4326) +
  theme_bw()
```

Now, here's a better plot :)

------------------------------------------------------------------------

## Mapping occurrence records ü¶å

4.  Visualise **N** and **SR** patterns in Czech Republic\

The hotspots of species richness are in cities. How can these be the richest areas for mammals?

. . .

Let's have a look at the sampling effort (`N`: number of records per grid cell) and compare both layers

------------------------------------------------------------------------

## Mapping occurrence records ü¶å

```{r}
#| echo: true
#| eval: true
ggplot() + 
  geom_sf(data=mammalsCZ_grids, aes(fill=N)) +
  scale_fill_fermenter(palette ='YlGnBu', n.breaks=9, direction = 1) +
  geom_sf(data=CZ_borders, fill=NA) +
  coord_sf(crs=4326) +
  theme_bw()
```

------------------------------------------------------------------------

## Mapping occurrence records ü¶å

What can you say about the hotspots of species richness we found?

```{r}
#| echo: false
#| eval: true
#| layout-ncol: 2
#| fig-cap: 
#|   - "Species richness"
#|   - "Number of records"

library(patchwork)

SR <- ggplot() + 
  geom_sf(data=mammalsCZ_grids, aes(fill=SR)) +
  scale_fill_fermenter(palette ='YlOrBr', n.breaks=9, direction = 1) +
  geom_sf(data=CZ_borders, fill=NA) +
  coord_sf(crs=4326) +
  theme_bw()

N <- ggplot() + 
  geom_sf(data=mammalsCZ_grids, aes(fill=N)) +
  scale_fill_fermenter(palette ='YlGnBu', n.breaks=9, direction = 1)+
  geom_sf(data=CZ_borders, fill=NA) +
  coord_sf(crs=4326) +
  theme_bw()

SR 
N
```

. . .

[In following steps (e.g., modelling) you should take into account this bias :) ]{.font-aside}

------------------------------------------------------------------------

## Mapping occurrence records ü¶å


1. Get occurrence records of mammals in the Czech Republic (`POINTS`)
2. Create a grid layer of the Czech Republic (`POLYGONS`)
3. Calculate sampling effort (N) and species richness per grid cell (SR)
4. Visualise **N** and **SR** patterns in Czech Republic


---

## References

-   R for Data Science <https://r4ds.hadley.nz>
-   Geocomputation with R <https://geocompr.robinlovelace.net>

------------------------------------------------------------------------

# Any doubts? {background-color="#488fb8"}
